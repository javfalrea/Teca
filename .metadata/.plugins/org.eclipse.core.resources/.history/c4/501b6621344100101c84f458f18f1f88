package com.teca.service;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import org.springframework.stereotype.Service;

import com.teca.entities.Genero;
import com.teca.util.General;

@Service
public class GeneroService {
	
	public Genero crear(String nombre) throws SQLException {
		Connection conn = General.conexion();
		
		String insertGenero = "INSERT INTO genero (nombre) VALUES (?)";
		
		PreparedStatement ps = conn.prepareStatement(insertGenero, Statement.RETURN_GENERATED_KEYS);
		ps.setString(1, nombre);
		
		int respuesta = ps.executeUpdate();
		if(respuesta != 1) {
			throw new SQLException("No se ha podido crear el género");
		}
		
		Long id = General.obtenerClaveGenerada(ps);
		
		Genero genero = new Genero(id, nombre);
		
		ps.close();
		conn.close();
		
		return genero;
	}
	
	public Genero modificar(Long id, String nombre) throws SQLException {
		Connection conn = General.conexion();
		
		String updateGenero = "UPDATE genero SET nombre = ? WHERE id = ?";
		
		PreparedStatement ps = conn.prepareStatement(updateGenero);
		ps.setString(1, nombre);
		ps.setLong(2, id);
		
		int respuesta = ps.executeUpdate();
		if(respuesta != 1) {
			throw new SQLException("No se ha podido crear el género");
		}
		
		Genero genero = new Genero(id, nombre);
		
		ps.close();
		conn.close();
		
		return genero;
	}
	
	public void eliminar(Long id) throws SQLException {
		Connection conn = General.conexion();
		
		String deleteGenero = "DELETE FROM genero WHERE id = ?";
		
		PreparedStatement ps = conn.prepareStatement(deleteGenero);
		ps.setLong(1, id);
		
		int respuesta = ps.executeUpdate();
		if(respuesta != 1) {
			throw new SQLException("No se ha podido crear el género");
		}
				
		ps.close();
		conn.close();
	}
	
	public List<Genero> buscarTodo() throws SQLException {
		Connection conn = General.conexion();
		
		String selectGenero = "SELECT * FROM genero";
		
		PreparedStatement ps = conn.prepareStatement(selectGenero);
		
		ResultSet rs = ps.executeQuery();
		List<Genero> generos = new ArrayList<Genero>();
		while(rs.next()) {
			Long id = rs.getLong("id");
			String nombre = rs.getString("nombre");
			
			Genero genero = new Genero(id, nombre);
			generos.add(genero);
		}
		
		rs.close();
		ps.close();
		conn.close();
		
		return generos;
	}
	
	public List<Genero> buscarPorNombre(String nombreBq) throws SQLException {
		Connection conn = General.conexion();
		
		String selectGenero = "SELECT * FROM genero WHERE LOWER(nombre) LIKE ?";
		
		PreparedStatement ps = conn.prepareStatement(selectGenero);
		ps.setString(1,  "%" + nombreBq.toLowerCase() + "%");
		
		ResultSet rs = ps.executeQuery();
		List<Genero> generos = new ArrayList<Genero>();
		while(rs.next()) {
			Long id = rs.getLong("id");
			String nombre = rs.getString("nombre");
			
			Genero genero = new Genero(id, nombre);
			generos.add(genero);
		}
		
		rs.close();
		ps.close();
		conn.close();
		
		return generos;
	}
	
	

}
