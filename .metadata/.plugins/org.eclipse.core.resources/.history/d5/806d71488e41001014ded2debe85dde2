package com.teca.service;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import org.springframework.stereotype.Service;

import com.teca.entities.Usuario;
import com.teca.util.General;

@Service
public class UsuarioService {
	
	public Usuario crear(String nombre, String contrasena, Boolean esAdmin) throws SQLException {
		Connection conn = General.conexion();
		
	    String comprobar = "SELECT COUNT(*) FROM usuario WHERE LOWER(nombre) = ?";
	    PreparedStatement check = conn.prepareStatement(comprobar);
	    check.setString(1, nombre.toLowerCase());

	    ResultSet rs = check.executeQuery();
	    rs.next();
	    int existentes = rs.getInt(1);

	    rs.close();
	    check.close();

	    if (existentes > 0) {
	        conn.close();
	        throw new SQLException("Ya existe un usuario con ese nombre.");
	    }
		
		String insertUsuario = "INSERT INTO usuario (nombre, contrasena, es_admin) VALUES (?, ?, ?)";
		
		PreparedStatement ps = conn.prepareStatement(insertUsuario, Statement.RETURN_GENERATED_KEYS);
		ps.setString(1, nombre);
		ps.setString(2, contrasena);
		ps.setBoolean(3, esAdmin);
		
		int respuesta = ps.executeUpdate();
		if(respuesta != 1) {
			throw new SQLException("No se ha podido crear el usuario");
		}
		
		Long id = General.obtenerClaveGenerada(ps);
		
		Usuario usuario = new Usuario(id, nombre, contrasena, esAdmin);
		
		ps.close();
		conn.close();
		
		return usuario;
	}
	
	public Usuario modificar(Long id, String nombre, String contrasena, Boolean esAdmin) throws SQLException {
		Connection conn = General.conexion();
		
	    String comprobar = "SELECT COUNT(*) FROM usuario WHERE LOWER(nombre) = ? AND id <> ?";
	    PreparedStatement check = conn.prepareStatement(comprobar);
	    check.setString(1, nombre.toLowerCase());
	    check.setLong(2, id);

	    ResultSet rs = check.executeQuery();
	    rs.next();
	    int existentes = rs.getInt(1);

	    rs.close();
	    check.close();

	    if (existentes > 0) {
	        conn.close();
	        throw new SQLException("Ya existe un usuario con ese nombre.");
	    }
		
		String updateUsuario = "UPDATE usuario SET nombre = ?, contrasena = ?, es_admin = ? WHERE id = ?";
		
		PreparedStatement ps = conn.prepareStatement(updateUsuario);
		ps.setString(1, nombre);
		ps.setString(2, contrasena);
		ps.setBoolean(3, esAdmin);
		ps.setLong(4, id);
		
		int respuesta = ps.executeUpdate();
		if(respuesta != 1) {
			throw new SQLException("No se ha podido modificar el usuario");
		}
		
		Usuario usuario = new Usuario(id, nombre, contrasena, esAdmin);
		
		ps.close();
		conn.close();
		
		return usuario;
	}
	
	public void eliminar(Long id) throws SQLException {
		Connection conn = General.conexion();
		
		String deleteUsuario = "DELETE FROM usuario WHERE id = ?";
		
		PreparedStatement ps = conn.prepareStatement(deleteUsuario);
		ps.setLong(1, id);
		
		int respuesta = ps.executeUpdate();
		if(respuesta != 1) {
			throw new SQLException("No se ha podido eliminar el usuario");
		}
				
		ps.close();
		conn.close();
	}
	
	public List<Usuario> buscarTodo() throws SQLException {
		Connection conn = General.conexion();
		
		String selectUsuario = "SELECT * FROM usuario";
		
		PreparedStatement ps = conn.prepareStatement(selectUsuario);
		
		ResultSet rs = ps.executeQuery();
		List<Usuario> usuarios = new ArrayList<Usuario>();
		while(rs.next()) {
			Long id = rs.getLong("id");
			String nombre = rs.getString("nombre");
			String contrasena = rs.getString("contrasena");
			Boolean esAdmin = rs.getBoolean("es_admin");
			
			Usuario usuario = new Usuario(id, nombre, contrasena, esAdmin);
			usuarios.add(usuario);
		}
		
		rs.close();
		ps.close();
		conn.close();
		
		return usuarios;
	}
	
	public List<Usuario> buscarPorNombre(String nombreBq) throws SQLException {
		Connection conn = General.conexion();
		
		String selectUsuario = "SELECT * FROM usuario WHERE LOWER(nombre) LIKE ?";
		
		PreparedStatement ps = conn.prepareStatement(selectUsuario);
		ps.setString(1,  "%" + nombreBq.toLowerCase() + "%");
		
		ResultSet rs = ps.executeQuery();
		List<Usuario> usuarios = new ArrayList<Usuario>();
		while(rs.next()) {
			Long id = rs.getLong("id");
			String nombre = rs.getString("nombre");
			String contrasena = rs.getString("contrasena");
			Boolean esAdmin = rs.getBoolean("es_admin");
			
			Usuario usuario = new Usuario(id, nombre, contrasena, esAdmin);
			usuarios.add(usuario);
		}
		
		rs.close();
		ps.close();
		conn.close();
		
		return usuarios;
	}	

}
